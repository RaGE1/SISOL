//https://www.hackerrank.com/contests/smart-interviews/challenges/si-bottom-up-level-order-of-tree
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;
struct node
{
    int data;
    node* left;
    node* right;
};
void levelorder(node* root)
{
    if(root==NULL)
        return;
    queue<node*>q1;
   // vector<vector<int> > v;
    int v[1000][1000];
    q1.push(root);int l=1,r=0,f=1,i=0,j=0,ind[10000],i1;
    while(!q1.empty())
    {
        node* p=q1.front();
       
        //cout<<p->data<<" ";
        v[i][j++]=p->data;
        l--;
        
    
        q1.pop();
        if(p->left!=NULL)
        {q1.push(p->left);r++;}
       
        if(p->right!=NULL)
        {q1.push(p->right);r++;}
        if(l==0)
        {    //cout<<"\n";
           
            l=r;r=0;
            ind[i++]=j;j=0;
        }
     
    }
    for(i1=i-1;i1>=0;i1--)
    {for(j=0;j<ind[i1];j++)
            cout<<v[i1][j]<<" ";
    cout<<"\n";}
}
node* create(int data)
{
    node* newnode=new node();
    newnode->data=data;
    newnode->left=newnode->right=NULL;
    return newnode;
}
node* insert(node* root,int data)
{
    if(root==NULL)
        root=create(data);
    else if(data<=root->data)
       root->left= insert(root->left,data);
    else
        root->right=insert(root->right,data);
    return root;
}
int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    int t;
    cin>>t;
    
    while(t--)
    {node* root=NULL;
        int n,a;
        cin>>n;
        while(n--)
        {
            cin>>a;
            root=insert(root,a);
        }
     levelorder(root);
     cout<<"\n";
    }
    return 0;
}
