//https://www.hackerrank.com/contests/smart-interviews/challenges/si-nodes-at-distance-k
#include <iostream>
#include<queue>
using namespace std;
struct node
{
    int data;
    node* left;
    node* right;
};
node*  create(int data1)
{
    node* newnode= new node();
    newnode->data=data1;
    newnode->left=newnode->right=NULL;
    return newnode;
}
node* insert(node* root,int data1)
{
    if(root==NULL)
    {
        root=create(data1);
    }
    else if(root->data>=data1)
    root->left=insert(root->left,data1);
    else
    root->right=insert(root->right,data1);
    
    return root;
}
int c=0,l=0,r=0;
void bfs(node* root,int k)
{
    if(root==NULL)
        return;
    queue<node* >q;
    q.push(root);
    int lev=0,m=1,r=0;
    while(!q.empty())
    {
        node* t=q.front();
        q.pop();
        m--;
        if(lev==k)
            c++;
        if(lev>k)
            break;
        if(t->left)
        {
            r++;
            q.push(t->left);
        }
        if(t->right)
        {
            r++;
            q.push(t->right);
        }
        if(m==0)
        {
            m=r;r=0;
            lev++;
        }
    }
}
node* search(node* root,int s)
{
    if(root==NULL)
        return NULL;
    if(root->data==s)
    {return root;}
    
    if(s<root->data)
        return search(root->left,s);
    else
        return search(root->right,s);
}
int ndk(node *root,int k,int s )
{
    if(root==NULL)
        return -1;
    if(root->data==s)
    {
        bfs(root,k);
        return 0;
    }
    int le=-1,ri=-1;
    if(s<root->data){
        
         le=ndk(root->left,k,s);
    }
    else
    {
         ri=ndk(root->right,k,s);
    
    }
    if(le!=-1)
    {
        if(le+1==k)
        {
            c++;
        }
        else{
            bfs(root->right,k-2-le);
        }
        return le+1;
    }
    if(ri!=-1)
    {
        if(ri+1==k)
            c++;
        else
            bfs(root->left,k-2-ri);
    }
    return ri+1;
}
int main() {
    // your code goes here
    int t;
    cin>>t;
    while(t--){
    int n,s,k,a;
    node* root=NULL;
    cin>>n>>s>>k;
    while(n--)
    {
        cin>>a;
       root= insert(root,a);
 
    
    }
      /*  l=0,r=0;
       node* t=search(root,s);
      
        bfs(t,k);
        */
          c=0;
        ndk(root,k,s);
        cout<<c<<"\n";
      
       
       

    }
    return 0;
}
