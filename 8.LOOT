//https://www.hackerrank.com/contests/smart-interviews/challenges/si-level-order-of-tree
#include<bits/stdc++.h>
using namespace std;
struct node{
  node *left=NULL,*right=NULL;
    int key;
};
void inorder(node *root)
{
    if(root==NULL)
        return;
    inorder(root->left);
    cout<<root->key<<" ";
    inorder(root->right);
}
void preorder(node *root)
{ if(root==NULL)
        return; cout<<root->key<<" ";
    preorder(root->left);
   
    preorder(root->right);
    
}
void postorder(node *root)
{ if(root==NULL)
        return;
    postorder(root->left);
   
    postorder(root->right);
     cout<<root->key<<" ";
}
node *creat(int data)
{
    node *x=new node();
    x->key=data;
    x->left=x->right=NULL;
    return x;
} 
node *insert(int x,node* root)
{
    if(root==NULL)
    return root= creat(x);
    if(x<root->key)
        root->left= insert(x,root->left);
    else
        root->right= insert(x,root->right);
    return root;
}
void level(node *root)
{
    if(root==NULL)
        return;
    queue<node*>q;
    q.push(root);int l=1,r=0;
   while(!q.empty()) {
        node *x=q.front();
       q.pop();cout<<x->key<<" ";
       l--;
       if(x->left!=NULL)
       {
           r++;
           q.push(x->left);
       }
         if(x->right!=NULL)
       {
           r++;
           q.push(x->right);
       }
       if(l==0)
       {
           cout<<"\n";l=r;r=0;
       }
    }
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        node *root=NULL;
        int n;
        cin>>n;
        while(n--){
            int x;
            cin>>x;
           root= insert(x,root);
        }
      level(root);
        cout<<"\n";
    }
}
