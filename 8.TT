//https://www.hackerrank.com/contests/smart-interviews/challenges/si-tree-traversals
#include<bits/stdc++.h>
using namespace std;
struct node{
  node *left=NULL,*right=NULL;
    int key;
};
void inorder(node *root)
{
    if(root==NULL)
        return;
   stack<node*>s;
    s.push(root);
    node* c=root->left;
    while(!( s.empty() && c==NULL)){
        if(c==NULL)
        {
            cout<<s.top()->key<<" ";
            c=s.top()->right;
            s.pop();
        }
        else{
            s.push(c);
            c=c->left;
        }
    }
}
void preorder(node *root)
{ 
    if(root==NULL)
        return;
    stack<node*>s;
    s.push(root);
    while(!s.empty()){
        node* x=s.top();
        s.pop();
        cout<<x->key<<" ";
        if(x->right!=NULL)
            s.push(x->right);
        if(x->left!=NULL)
            s.push(x->left);
    }
    
    
}
void postorder(node *root)
{ if(root==NULL)
        return;
    postorder(root->left);
   
    postorder(root->right);
     cout<<root->key<<" ";
}
node *creat(int data)
{
    node *x=new node();
    x->key=data;
    x->left=x->right=NULL;
    return x;
} 
node *insert(int x,node* root)
{
    if(root==NULL)
    return root= creat(x);
    if(x<root->key)
        root->left= insert(x,root->left);
    else
        root->right= insert(x,root->right);
    return root;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        node *root=NULL;
        int n;
        cin>>n;
        while(n--){
            int x;
            cin>>x;
           root= insert(x,root);
        }
        preorder(root);
          cout<<"\n";
        inorder(root);
          cout<<"\n";
        postorder(root);
        cout<<"\n\n";
    }
}
