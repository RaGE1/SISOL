//https://www.hackerrank.com/contests/smart-interviews/challenges/si-is-balanced-tree
#include <iostream>
using namespace std;
struct node
{
    int data;
    node* left;
    node* right;
};
int max(int a,int b)
{
    if(a>b)
    return a;
    else 
    return b;
}
int min(int a,int b)
{
    if(a<b)
    return a;
    else 
    return b;
}
int maxheight(node* root)
{
    if(root==NULL)
    return -1;
    int l=maxheight(root->left);
       int r= maxheight(root->right);
        return max(l,r)+1;

    
    
}
int isb(node* root)
{
    if(root==NULL)
        return 1;
    if(abs(maxheight(root->left)-maxheight(root->right))<=1 &&isb(root->left) && isb(root->right) )
        return 1;
    else
        return 0;
    
}

node*  create(int data1)
{
    node* newnode= new node();
    newnode->data=data1;
    newnode->left=newnode->right=NULL;
    return newnode;
}
node* insert(node* root,int data1)
{
    if(root==NULL)
    {
        root=create(data1);
    }
    else if(root->data>=data1)
    root->left=insert(root->left,data1);
    else
    root->right=insert(root->right,data1);
    
    return root;
}

int main() {
    // your code goes here
    int t;
    cin>>t;
    while(t--){
    int n,a;
    node* root=NULL;
    cin>>n;
    while(n--)
    {
        cin>>a;
       root= insert(root,a);}
  
  if(isb(root))
        cout<<"Yes\n";
    else
        cout<<"No\n";
    }
    return 0;
}
